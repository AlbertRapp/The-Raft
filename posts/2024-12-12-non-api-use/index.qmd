---
title: "Use of non-API functions in data.table"
author: "Ivan Krylov"
date: "2024-12-12"
categories: [code]
# image: "image.jpg"
draft: true
bibliography: refs.bib
---

```{r}
#| echo: false
library(tools) # format.check_details
load('precomputed.rda')
```

In the late 1970's, people at Bell Laboratories designed the S
programming language in order to facilitate interactive exploratory data
analysis [@Chambers2016]. Instead of writing, compiling, scheduling, and
interpreting the output of individual Fortran programs, the goal of S
was to conduct all the necessary steps of the analysis on the fly. S
achieved this not by replacing the extensive collection of Fortran
subroutines, but by providing a special interface language [@Becker1985]
through which S could communicate with compiled code.

Fast forward more than four decades and an increase by more than three
orders of magnitude in storage and processing capability of computers
around us. The [dominant implementation of S is now R][is.R]. It is now
feasible to implement algorithms solely in R, recouping the potential
performance losses in programmer effort debugging and maintaining the
code [@Nash2024]. Still, the capability of R to be extended by
special-purpose compiled code is as important as ever. As of `r when`,
`r with(cpdb, round(sum(NeedsCompilation=='yes')/length(NeedsCompilation)*100))`%
of CRAN packages use compiled code. Since the implementation language of
R is C, not Fortran, the programming interface for R is also defined in
the C terms.

What's in an API?
=================

<!-- Historically: [WRE] giveth certain entry points for use,
`tools:::nonAPI` taketh away certain others, and the rest exist in an
ontologial limbo as forbidden and yet not utterly forbidden

Example: serialization API -->

<!-- Calls for improvement have been seen before, e.g. [NativeAPI2016]
MAYBE: search R(-pkg)?-devel for earlier mentions of this
MAYBE: how did Rinternals change since 3.3.0? USE_RINTERNALS is gone
After the [latest conflict][ALTREPnonAPI], Luke Tierney [started
work][clarifyingAPI] on declaring functions and symbols (variables or
preprocessor constants or enums?) as API / experimental API / embedding
API -->

<!-- MAYBE: somehow obtain the list of imports (mirror Windows builds
from CRAN? download the one compiled by Luke Tierney?) and try to
extract neither-official-API nor-official-nonAPI counts -->

<!-- MAYBE: see which listed non-API functions are the most "popular" in
packages still on CRAN -->

Use of non-API entry points in `data.table`
===========================================

`r gsub(
 '(?m)^', '>     ', perl = TRUE,
 format(subset(checks, grepl('API', Output))[1,])
)`

 -- ` R CMD check --as-cran ` on a released version of `data.table`

Tracked in [#6180][remove_non_API]

Testing for a `data.frame`: `isFrame`
-------------------------------------

Back in 2012, Matt Dowle needed to quickly test an object for being a
`data.frame`, and the internal function `isFrame` seemed like it
[did the job][datatable_isframe_added]. Since `isFrame` was not part of
the documented API, in 2024 Luke Tierney gave the function a
better-fitting name, [`isDataFrame`][R_isdataframe_added], and made it
an experimental API, while retaining the original function as a wrapper.

Use of `isFrame` [doesn't give a NOTE yet][remove_isframe], but when
R-4.5.0 is released together with the new name for the function,
`data.table` will be able to use it, falling back to `isFrame` on older
versions of R. `isDataFrame` is documented among other [replacement
entry point names][WRE_replacement_entrypoints] in Writing R Extensions.

Operating on the S4 bit: `IS_S4_OBJECT`, `SET_S4_OBJECT`, `UNSET_S4_OBJECT`
----------------------------------------------------------------------------------------

The `data.table` class is [registered][setOldClass] with the S4 OOP
system, making it possible to create S4 classes containing `data.table`s
as members (`setClass(slots = c(mytable = 'data.table'))`) or even
inheriting from `data.table` (and, in turn, from `data.frame`:
`setClass(contains = 'data.table')`). This latter case requires care
from the C code: when creating a copy of an S4 `data.table` from scratch
(or setting all attributes from one object onto another), the
destination value must also end up being an S4 object. This is
controlled by the special "S4" bit in the header of every R object, so
the code must read and set it correctly.

The internal functions `IS_S4_OBJECT`, `SET_S4_OBJECT`,
`UNSET_S4_OBJECT` exist as bare interfaces to [the internal
macros][IS_S4_OBJECT] of the same names and directly access the flag
inside their argument.

The [`Rf_isS4`][isS4] function is a wrapper for `IS_S4_OBJECT` that
follows the usual naming convention for remapped functions, has been
part of the API for a long time and could implement additional checks if
they are needed by R. The [`Rf_asS4`][asS4] function (experimental API)
is more involved, making sure to operate on a shallow copy of an object
instead of overwriting it in place and trying to "deconstruct" S4
objects into S3 objects if possible and requested.

Solution: [use `Rf_isS4` instead of
`IS_S4_OBJECT`][remove_set_s4_object], as
[documented][WRE_replacement_entrypoints] in Writing R Extensions. Use
`Rf_asS4` to control the S4 object bit, but be careful <!--how?-->
around shared objects.

Converting between calls and pairlists: `SET_TYPEOF`
----------------------------------------------------

[#6313][remove_set_typeof]

Reading the reference counts: `NAMED`
-------------------------------------

[#6420][remove_named]

Strings as C arrays of `CHARSXP` values: `STRING_PTR`
-----------------------------------------------------

[Fixed in git][remove_string_ptr] by switching to `STRING_PTR_RO`,
present on CRAN for now.
<!-- TODO: Why used -->

Why non-API: writes to arrays of `SEXP` values *must* go through the
write barrier for GC to work, hence the need for `SET_STRING_ELT` and
`SET_VECTOR_ELT`

See also: [PR18775]

Encoding bits: `LEVELS`
-----------------------

[Waiting for R-4.5.0 to release with the new API][remove_levels]
<!-- TODO: link to PR -->

Why used: need to know the encoding. Distinguish between `CE_UTF8` and
string actually in UTF-8 (can also happen with `CE_NATIVE` in a UTF-8
locale)

<!-- TODO: how exactly is the check implemented in data.table and which
APIs R offers for this purpose -->
<!-- TODO: examples of why exactly LEVELS is deep internal sorcery -->
<!-- TODO: LEVELS live inside serialized data, which R will have to keep
being able to read -->

Growable vectors: `SETLENGTH`, `SET_GROWABLE_BIT`, `SET_TRUELENGTH`
-------------------------------------------------------------------

<!-- TODO: history of overallocated lists+names in data.table -->

Why used: need to create new columns by reference, which requires free
column and name slots

Why non-API: make a length too long and the list is broken.
<!-- TODO: Setting a length too short while having something other than
`R_NilValue` inside: does it break something? Are these values
reachable from the GC point of view? -->
<!-- TODO: the exact nature of GROWABLE_BIT -->
<!-- TODO: verify that these are the only uses of SETLENGTH,
SET_GROWABLE_BIT -->

What to do about it: reimplement in ALTREP on R &ge; 4.1

Fast string matching: `SET_TRUELENGTH`, `TRUELENGTH`
----------------------------------------------------

Why used: to exploit the `CHARSXP` cache. R interns strings, so a string
with the given contents and encoding bits exists as a single object,
even if manually recreated using `mkCharLenCE()` and friends.
Convert everything into UTF-8 and you can use pointer comparison.
Given `x` and `table` of strings to find elements of `x` in, `chmatch()`
puts indices into `table` into the `TRUELENGTH` field of the `CHARSXP`
contents of `table`, then walks `x` and reads the indices back from the
matching `CHARSXP`s, then carefully restores everything.

<!-- TODO: expand, possibly illustrate this explanation and others -->

Why non-API: this field is not always used (cf. `data.table` having to
work with it being completely uninitialised in old versions of R), but R
does use it for internal purposes sometimes (cf. `data.table` having to
restore nonzero `TRUELENGTH` for `CHARSXP` values used inside `SYMSXP`
values).

Why this is hard to fix: the current happy path is very fast.
`O(length(table)) + O(length(x))` to convert encodings,
`O(length(table))` to mark indices, `O(length(x))` to look them up,
`O(length(table))` to restore everything. Done. Pointer comparisons will
take `O(length(table)*length(x))`, which is Bad. How expensive is it to
build a hash for `O(length(table))` entries? Best case lookup will be
once again `O(length(x))`, but only without collisions, the constants
are unknown, and the C standard says that hashing pointers is fraught
with peril.

<!-- TODO: more uses of SET_TRUELENGTH for similar purposes -->

References
==========

[is.R]: https://developer.r-project.org/blosxom.cgi/R-devel/NEWS/2024/03/08#n2024-03-09
[WRE]: https://cran.r-project.org/doc/manuals/R-exts.html
[NativeAPI2016]: https://wiki.r-consortium.org/view/R_Native_API
[ALTREPnonAPI]: https://stat.ethz.ch/pipermail/r-devel/2024-April/083349.html
[clarifyingAPI]: https://stat.ethz.ch/pipermail/r-devel/2024-June/083449.html
[remove_non_API]: https://github.com/Rdatatable/data.table/issues/6180
[datatable_isframe_added]: https://github.com/Rdatatable/data.table/commit/87666e70ce1a69b28f0e92ec7504d80e3d53a824#diff-4fc47a9752ba4edfef0cabcc1958eda943545ad3859e48d498b0e3f87a9ae5aeR192
[R_isdataframe_added]: https://github.com/r-devel/r-svn/commit/4ef83b9dc3c6874e774195d329cbb6c11a71c414
[WRE_replacement_entrypoints]: https://cran.r-project.org/doc/manuals/r-devel/R-exts.html#Some-API-replacements-for-non_002dAPI-entry-points
[remove_isframe]: https://github.com/Rdatatable/data.table/issues/6244
[setOldClass]: https://search.r-project.org/R/refmans/methods/html/setOldClass.html
[IS_S4_OBJECT]: https://github.com/r-devel/r-svn/blob/c20ebd2d417d9ebb915e32bfb0bfdad768f9a80a/src/main/memory.c#L4033-L4035
[isS4]: https://github.com/r-devel/r-svn/blob/c20ebd2d417d9ebb915e32bfb0bfdad768f9a80a/src/main/objects.c#L1838-L1841
[asS4]: https://github.com/r-devel/r-svn/blob/c20ebd2d417d9ebb915e32bfb0bfdad768f9a80a/src/main/objects.c#L1843
[remove_set_s4_object]: https://github.com/Rdatatable/data.table/pull/6183
[remove_set_typeof]: https://github.com/Rdatatable/data.table/pull/6313
[remove_named]: https://github.com/Rdatatable/data.table/pull/6420
[remove_levels]: https://github.com/Rdatatable/data.table/pull/6422
[remove_string_ptr]: https://github.com/Rdatatable/data.table/pull/6312
[PR18775]: https://bugs.r-project.org/show_bug.cgi?id=18775
