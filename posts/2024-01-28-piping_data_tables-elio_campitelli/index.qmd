---
title: "Piping data.tables"
author:  "Elio Campitelli"
date: "2024-01-28"
categories: [tips, tutorials, documentation, guest post]
image: "image.jpg"
draft: false
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(data.table)

```

Like a devoted plumber, modern R loves pipes. The magrittr pipe has a [long history](http://adolfoalvarez.cl/blog/2021-09-16-plumbers-chains-and-famous-painters-the-history-of-the-pipe-operator-in-r/) and it's fair share of detractors, but with the implementation of the native pipe operator [released in May 2021](https://stat.ethz.ch/pipermail/r-announce/2021/000670.html) it's clear that chaining operations is now part of R vernacular.

So it's no surprise that people often wonder how can you use pipes with data.table, as one participant of the recent data.table tutorial during [LatinR 2023](https://latin-r.com/). The surprising answer is that data.table has supported pipelines since its inception in 2006. Furthermore, you can easily use either the magrittr or native pipes.

![<a href="https://www.freepik.com/free-vector/pipeline-maintenance-concept-illustration_13717669.htm">Image by storyset</a> on Freepik](image.jpg){fig-alt="Vector graphic of two persons dressed in orange safety gear maintaining a thick pipe." fig-align="center"}

## The data.table "pipe"

Instead of passing data to functions, data.table syntax is all about operating inside the `[` operator[^1] .

[^1]: Technically, the `[` operator is itself a function, but the syntax is not function-like.

```{=html}
<div  style=" margin-left: auto; margin-right: auto;display: block; text-align:center; width:fit-content;"> 
<p style="font-size:250%;font-weight:bold" >
<code>DT[<span class="rows">rows</span>, <span class="columns">columns</span>, <span class="by">by</span>]</code>
</p>
</div>
```
Where <code>**DT**</code> is a data.table object, the <code>[**rows**]{.rows}</code> argument is used for filtering and joining operations, the <code>[**columns**]{.columns}</code> argument can summarise and mutate, and the <code>[**by**]{.by}</code> argument defines the groups to which to apply these operations.

So, to get only Chinstrap penguins from the penguins dataset, instead of using `base::subset()` or `dplyr::filter()` you would do

```{r}
penguins_chinstrap <- penguins[species == "Chinstrap"]
```

Or, to get the mean mean flipper length of these penguins for each island and sex, you could summarise the data like this:

```{r}
penguins_chinstrap[, .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

But because the output of the first operation is a data.table, you can add another `[` operator after the first to chain both operations:

```{r}
penguins[species == "Chinstrap"][, .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

I usually call this the `][` pipe.

You might have noticed that for just two operations, this line of code is already too long, so for even moderately long chains it's usually advisable to put each operation in its own line. There's some controversy on how to break the `][` pipe into lines and indent it. One option is to add a new line after the second `[`, which has the advantage of actually writing the `][` pipe explicitly.

```{r}
penguins[species == "Chinstrap" ][
  , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

A second options is to add the new line before the end of the first operation like so:

```{r}
penguins[species == "Chinstrap" 
       ][ , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

Personally, I don't like this syntax very much. No matter how you slice it, you always get what feels to me as incomplete lines. Also, RStudio doesn't correctly indent the second syntax automatically.

Alternatively, the `][` pipe can go in its own line like so:

```{r}
penguins[species == "Chinstrap" 
][ 
  , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)
]
```

This is indented correctly by RStudio and has the advantage of making easy to comment out each individual step:

```{r}
penguins[species == "Chinstrap" 
][ 
  # , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)
]
```

## data.table and magrittr

Until the introduction of the native pipe, I used to write long data.table pipelines using magrittr. To do this, I took advantage of the **`.`** placeholder which, within a magrittr pipe, refers to the result of the previous step.

```{r}
library(magrittr)

penguins[species == "Chinstrap"] %>%
  .[ , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

I really like this syntax as it's very clean. Each line of code is a complete operation without dangling parts and it's easy to comment out single steps.

The only downside is that the dot here has two meanings: as the placeholder for the previous result in `.[`, and as an alias for list in `.(mean_flipper_length = mean(flipper_length_mm))`. It's not a huge issue, though, since I tend to read `.[` as a single entity, but it can trip up some people.

## Using the native pipe

The native pipe at first didn't have a placeholder and it didn't chaining to `[`, so this so the above syntax wasn't directly applicable. But you could cheat by creating an alias for `[` and use that alias as a regular function. So this works:

```{r}
DT <- `[`

penguins[species == "Chinstrap"] |> 
  DT( , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island))
```

This worked so well that data.table officially added the `DT()` function (currently only in the development version), so if you're using the latest development version you don't even need the first line[^2].

[^2]: This function also allows the user to use data.table syntax to data.frames and tibbles retaining the class of the output.

This syntax is fine but I don't like that I need ro write one more character and the closing character being a `)` can get confusing because it adds to the closing `)` that you usually have in the `by` argument.

From R 4.3.0 onwards, the native pipe supports a `_` placeholder to the right-hand side fo the pipe. So now the magrittr syntax can be directly translated to

```{r}
penguins[species == "Chinstrap"] |> 
  _[ , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

I like this syntax even more than the original magrittr one because it solves the double meaning problem and operations get hugged by a pair of brackets.

## The four pipes of data.table

So, there you are, 4 different ways you can pipe your data.tables.

Use the `][` pipe if you want your code to have minimal dependencies and work in older versions of R. Use the `%>%` pipe if you want your code to work in older versions of R and don't mind the extra dependency. Use any version of the `|>` pipe if you want minimal dependencies and don't mind depending on R \>= 4.3.0.

```{r}
penguins[species == "Chinstrap" ][
  , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]

penguins[species == "Chinstrap"] %>%
  .[ , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]

penguins[species == "Chinstrap"] |> 
  DT( , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island))

penguins[species == "Chinstrap"] |> 
  _[ , .(mean_flipper_length = mean(flipper_length_mm)), by = .(sex, island)]
```

<a href="https://www.freepik.com/free-vector/pipeline-maintenance-concept-illustration_13717669.htm">Image by storyset</a> on Freepik
